{"version":3,"file":"static/webpack/static/development/pages/index.js.1d1947d164af26340658.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// NPM Dependencies\nimport React, { Component } from 'react';\nimport Sarus from '@anephenix/sarus';\n\n// File Dependencies\nimport '../styles/homepage.scss';\nimport '../styles/theme.scss';\nimport '../styles/WebSocketForm.scss';\nimport '../styles/EventLogger.scss';\n\nclass WebSocketForm extends Component {\n  constructor(props) {\n    super(props);\n    this.connect = this.connect.bind(this);\n  }\n\n  connect(event) {\n    event.preventDefault();\n    this.props.onSubmit(event);\n  }\n\n  render() {\n    return (\n      <div id=\"websocket-form\">\n        <form onSubmit={this.connect}>\n          <label htmlFor=\"websocket-server\">WebSocket server url</label>\n          <input\n            type=\"text\"\n            placeholder=\"e.g. wss://ws.anephenix.com\"\n            name=\"websocket-server\"\n          />\n          <button type=\"submit\">Connect</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst EventItem = ({ date, type, info }) => {\n  const className = `status ${type}`;\n  return (\n    <div className=\"event\">\n      <div className={className}>{type}</div>\n      <div className=\"date\">\n        {\n          date\n            .toISOString()\n            .split('T')[1]\n            .split('Z')[0]\n        }\n      </div>\n      <div className={info}>{info}</div>\n    </div>\n  );\n};\n\nclass EventLogger extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { sarus, eventLog } = this.props;\n    if (sarus) {\n      return <div id=\"event-logger\">{eventLog.map(EventItem)}</div>;\n    } else {\n      return null;\n    }\n  }\n}\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: null,\n      sarus: null,\n      eventLog: []\n    };\n    this.createConnection = this.createConnection.bind(this);\n  }\n\n  createConnection(event) {\n    const self = this;\n    const { eventLog } = self.state;\n    const url = event.target.getElementsByTagName('input')[0].value;\n    const sarus = new Sarus({\n      url,\n      retryConnectionDelay: true,\n      eventListeners: {\n        open: [\n          () => {\n            eventLog.push({\n              date: new Date(),\n              type: 'open',\n              info: `Connection on ${url} is open`\n            });\n            self.setState({ eventLog });\n          }\n        ],\n        message: [\n          event => {\n            eventLog.push({\n              date: new Date(),\n              type: 'message',\n              info: 'Received message from server',\n              data: event.data\n            });\n            self.setState({ eventLog });\n          }\n        ],\n        close: [\n          () => {\n            eventLog.push({\n              date: new Date(),\n              type: 'close',\n              info: `Connection to ${url} is closed`\n            });\n            self.setState({ eventLog });\n          }\n        ],\n        error: [\n          error => {\n            eventLog.push({\n              date: new Date(),\n              type: 'error',\n              info: `An error occurred`,\n              error\n            });\n            self.setState({ eventLog });\n          }\n        ]\n      }\n    });\n    this.setState({ sarus, url });\n  }\n\n  render() {\n    const { sarus, eventLog } = this.state;\n    return (\n      <div id=\"homepage\">\n        <h1>Sarus client logger</h1>\n        <p>Type in the url for your WebSocket server, and press Connect.</p>\n        <WebSocketForm onSubmit={this.createConnection} />\n        <EventLogger sarus={sarus} eventLog={eventLog} />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAzBA;AACA;AA2BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;AAZA;AACA;AAcA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAzCA;AAHA;AAgDA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA5EA;AACA;AA8EA;;;;A","sourceRoot":""}